# Dennis Zang (704766877), Assignment 2

# -*- coding: utf-8 -*-
"""Fall2020_CS146_HW2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AEJPw6aWPAVxOZb7cfbp9S_SYxk-swJC
"""

# This code was adapted from course material by Jenna Wiens (UMichigan).

# python libraries
import os

# numpy libraries
import numpy as np

# matplotlib libraries
import matplotlib.pyplot as plt

# To add your own Drive Run this cell.
from google.colab import drive
drive.mount('/content/drive')

######################################################################
# classes
######################################################################


class Data:
    def __init__(self, X=None, y=None):
        """
        Data class.
        
        Attributes
        --------------------
            X       -- numpy array of shape (n,d), features
            y       -- numpy array of shape (n,), targets
        """

        # n = number of examples, d = dimensionality
        self.X = X
        self.y = y

    def load(self, filename):
        """
        Load csv file into X array of features and y array of labels.
        
        Parameters
        --------------------
            filename -- string, filename
        """


        # load data
        with open(filename, "r") as fid:
            data = np.loadtxt(fid, delimiter=",")

        # separate features and labels
        self.X = data[:, :-1]
        self.y = data[:, -1]

    def plot(self, **kwargs):
        """Plot data."""

        if "color" not in kwargs:
            kwargs["color"] = "b"

        plt.scatter(self.X, self.y, **kwargs)
        plt.xlabel("x", fontsize=16)
        plt.ylabel("y", fontsize=16)
        plt.show()

# wrapper functions around Data class
def load_data(filename):
    data = Data()
    data.load(filename)
    return data


def plot_data(X, y, **kwargs):
    data = Data(X, y)
    data.plot(**kwargs)

class PolynomialRegression:
    def __init__(self, m=1, reg_param=0):
        """
        Ordinary least squares regression.
        
        Attributes
        --------------------
            coef_   -- numpy array of shape (d,)
                       estimated coefficients for the linear regression problem
            m_      -- integer
                       order for polynomial regression
            lambda_ -- float
                       regularization parameter
        """

        # self.coef_ represents the weights of the regression model
        self.coef_ = None
        self.m_ = m
        self.lambda_ = reg_param

    def generate_polynomial_features(self, X):
        """
        Maps X to an mth degree feature vector e.g. [1, X, X^2, ..., X^m].
        
        Parameters
        --------------------
            X       -- numpy array of shape (n,1), features
        
        Returns
        --------------------
            Phi     -- numpy array of shape (n,(m+1)), mapped features
        """

        n, d = X.shape

        ### ========== TODO : START ========== ###
        # part b: modify to create matrix for simple linear model
        # part g: modify to create matrix for polynomial model

        # technically calculating X^T for y = x^T * coef
        m = self.m_
        Phi = np.ones((n, m + 1))       # initialize a numpy array for m+1 dimensions (with the first column already full of 1's)
        for pow in range(1, m + 1):     # set the remaining columns to the correct power of X
          buf = X ** pow
          Phi[:, pow] = buf.flatten()

        ### ========== TODO : END ========== ###

        return Phi

    def fit_GD(self, X, y, eta=None, eps=0, tmax=10000, verbose=False):
        """
        Finds the coefficients of a {d-1}^th degree polynomial
        that fits the data using least squares batch gradient descent.
        
        Parameters
        --------------------
            X       -- numpy array of shape (n,d), features
            y       -- numpy array of shape (n,), targets
            eta     -- float, step size
            eps     -- float, convergence criterion
            tmax    -- integer, maximum number of iterations
            verbose -- boolean, for debugging purposes
        
        Returns
        --------------------
            self    -- an instance of self
        """
        if self.lambda_ != 0:
            raise Exception("GD with regularization not implemented")

        X = self.generate_polynomial_features(X)  # map features
        n, d = X.shape
        eta_input = eta
        self.coef_ = np.zeros(d)  # coefficients
        err_list = np.zeros((tmax, 1))  # errors per iteration

        # GD loop
        for t in range(tmax):
            ### ========== TODO : START ========== ###
            # part f: update step size
            # change the default eta in the function signature to 'eta=None'
            # and update the line below to your learning rate function
            if eta_input is None:
                eta = 1.0 / (1.0 + t)  # change this line
            else:
                eta = eta_input
            ### ========== TODO : END ========== ###

            ### ========== TODO : START ========== ###
            # part d: update w (self.coef_) using one step of GD
            # hint: you can write simultaneously update all w using vector math

            '''
            # TLDR this works by summing each (Y_error * (x or y))
            # Example for m = 1:
            [1   ... 1  ] [yError_0]  = [gradient_0]
            [x_0 ... x_N] [.       ]    [gradient_1]
                          [.       ]
                          [.       ]
                          [yError_N]
            # still need to scale the above "gradient" by the step size
            '''
            yPred = np.matmul(X, self.coef_)
            yPred = yPred.reshape(yPred.shape[0], -1)
            yErrs = yPred - y.reshape(y.shape[0], -1)
            gradient = np.matmul(np.transpose(X), yErrs) * 2 * eta
            self.coef_ -= gradient.flatten()

            # track error
            # hint: you cannot use self.predict(...) to make the predictions
            y_pred = np.matmul(X, self.coef_)  # change this line
            err_list[t] = np.sum(np.power(y - y_pred, 2)) / float(n)
            ### ========== TODO : END ========== ###

            # stop?
            if t > 0 and abs(err_list[t] - err_list[t - 1]) <= eps:
                break

            # debugging
            # debugging
            if verbose :
                x = np.reshape(X[:,1], (n,1))
                cost = self.cost(x,y)
                print ("iteration: %d, cost: %f" % (t+1, cost))

        print("number of iterations: %d" % (t + 1))

        return self

    def fit(self, X, y, l2regularize=None):
        """
        Finds the coefficients of a {d-1}^th degree polynomial
        that fits the data using the closed form solution.
        
        Parameters
        --------------------
            X       -- numpy array of shape (n,d), features
            y       -- numpy array of shape (n,), targets
            l2regularize    -- set to None for no regularization. set to positive double for L2 regularization
                
        Returns
        --------------------        
            self    -- an instance of self
        """

        X = self.generate_polynomial_features(X)  # map features

        ### ========== TODO : START ========== ###
        # part e: implement closed-form solution
        # hint: use np.dot(...) and np.linalg.pinv(...)
        #       be sure to update self.coef_ with your solution

        # this single line is pretty much w = ((X^T * X)^-1)(X^T)Y
        self.coef_ = np.matmul(np.matmul(np.linalg.pinv(np.dot(np.transpose(X), X)), np.transpose(X)), y.reshape(y.shape[0], -1)).flatten()
        ### ========== TODO : END ========== ###

    def predict(self, X):
        """
        Predict output for X.
        
        Parameters
        --------------------
            X       -- numpy array of shape (n,d), features
        
        Returns
        --------------------
            y       -- numpy array of shape (n,), predictions
        """
        if self.coef_ is None:
            raise Exception("Model not initialized. Perform a fit first.")

        X = self.generate_polynomial_features(X)  # map features

        ### ========== TODO : START ========== ###
        # part c: predict y
        # y = XW
        y = np.matmul(X, self.coef_)
        ### ========== TODO : END ========== ###

        return y

    def cost(self, X, y):
        """
        Calculates the objective function.
        
        Parameters
        --------------------
            X       -- numpy array of shape (n,d), features
            y       -- numpy array of shape (n,), targets
        
        Returns
        --------------------
            cost    -- float, objective J(w)
        """
        ### ========== TODO : START ========== ###
        # part d: compute J(w)
        cost = 0.0
        X = self.generate_polynomial_features(X)
        predY = np.matmul(X, self.coef_)          # predictions of y for each sample in X
        err = np.subtract(predY, y)               # calculate the offsets
        err = err ** 2                            # square all offsets
        for val in err:                           # sum all squared offsets
          cost += val

        ### ========== TODO : END ========== ###
        return cost

    def rms_error(self, X, y):
        """
        Calculates the root mean square error.
        
        Parameters
        --------------------
            X       -- numpy array of shape (n,d), features
            y       -- numpy array of shape (n,), targets
        
        Returns
        --------------------
            error   -- float, RMSE
        """
        ### ========== TODO : START ========== ###
        # part h: compute RMSE
        error = (self.cost(X, y) / X.shape[0]) ** 0.5     # pretty much sqrt(J(W)/N)
        ### ========== TODO : END ========== ###
        return error

    def plot_regression(self, xmin=0, xmax=1, n=50, **kwargs):
        """Plot regression line."""
        if "color" not in kwargs:
            kwargs["color"] = "r"
        if "linestyle" not in kwargs:
            kwargs["linestyle"] = "-"

        X = np.reshape(np.linspace(0, 1, n), (n, 1))
        y = self.predict(X)
        plot_data(X, y, **kwargs)
        plt.show()

######################################################################
# main
######################################################################

def main():
    # load data with correct file path

    ### ========== TODO : START ========== ###
    data_directory_path =  "/content/drive/My Drive/Fall2020-CS146-HW2"
    ### ========== TODO : END ========== ###

    train_data = load_data(os.path.join(data_directory_path, "train.csv"))
    test_data = load_data(os.path.join(data_directory_path,"test.csv"))

    ### ========== TODO : START ========== ###
    # part a: main code for visualizations
    print("Visualizing data...")
    plot_data(train_data.X, train_data.y)

    ### ========== TODO : END ========== ###

    ### ========== TODO : START ========== ###
    # parts b-f: main code for linear regression

    # part b and c
    print("Investigating linear regression...")
    # part c and e
    print("(part c and e)")
    linReg = PolynomialRegression()
    linReg.fit(train_data.X, train_data.y)
    print(linReg.coef_)
    print(linReg.cost(train_data.X, train_data.y))
    # linPredY = linReg.predict(train_data.X)
    # plot_data(train_data.X, linPredY)

    # part d-1
    print()
    print("(part d-1)")
    model = PolynomialRegression(1)
    model.coef_ = np.zeros(2)
    c = model.cost(train_data.X, train_data.y)
    print(f'model_cost:{c}')

    # part d-2 and d-3
    print()
    print("(part d-2 and d-3)")
    model = PolynomialRegression(1)
    model.coef_ = np.zeros(2)
    model.fit_GD(train_data.X, train_data.y, eta = 0.000001)
    print(model.coef_)
    print(model.cost(train_data.X, train_data.y))
    model.coef_ = np.zeros(2)
    model.fit_GD(train_data.X, train_data.y, eta = 0.00001)
    print(model.coef_)
    print(model.cost(train_data.X, train_data.y))
    model.coef_ = np.zeros(2)
    model.fit_GD(train_data.X, train_data.y, eta = 0.001)
    print(model.coef_)
    print(model.cost(train_data.X, train_data.y))
    model.coef_ = np.zeros(2)
    model.fit_GD(train_data.X, train_data.y, eta = 0.0168)
    print(model.coef_)
    print(model.cost(train_data.X, train_data.y))

    # part f
    print()
    print("(part f)")
    model.coef_ = np.zeros(2)
    model.fit_GD(train_data.X, train_data.y)
    print(model.coef_)
    print(model.cost(train_data.X, train_data.y))

    ### ========== TODO : END ========== ###

    ### ========== TODO : START ========== ###
    # parts g-i: main code for polynomial regression
    print("Investigating polynomial regression...")
    print("(part i)")
    x = [i for i in range(11)]
    trainError = []
    testError = []
    for m in x:
      print(f"\t testing m={m}")
      model = PolynomialRegression(m)
      model.fit(train_data.X, train_data.y)
      print(f"\t {model.coef_}")
      trainError = trainError + [model.rms_error(train_data.X, train_data.y)]
      testError = testError + [model.rms_error(test_data.X, test_data.y)]
      print(f"\t {model.rms_error(train_data.X, train_data.y)}")
      print(f"\t {model.rms_error(test_data.X, test_data.y)}")
      print()
    plt.plot(x, trainError)
    plt.plot(x, testError)
    plt.xlabel("m")
    plt.ylabel("RMS Error")
    plt.show()

    ### ========== TODO : END ========== ###

    print("Done!")

if __name__ == "__main__":
    main()
