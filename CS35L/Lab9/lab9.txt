1.)
First, I made a copy of the git repository.
"git clone ~eggert/src/gnu/diffutils"


2.)
I enter the repository, and output a copy of the entire log into a text file.
"cd diffutils"
"git log > git-log.txt"


3.)
Here, I output the list of tags into a test file.
"git tag > git-tags.txt"


4.)
Here, I view the log in emacs and searched for the given string using C-s,
found its corresponding patch number, and used the patch number to output the
specific patch into a text file.
"emacs git-log.txt"
'C-s maint: quote 'like this' or "like this", not `like this'"
(line 1437)
"git show 62ca21c8c1a5aa3488589dcb191a4ef04ae9ed4f > quote_patch.txt"


5.)
Here, I created a new branch from v3.0 named new3.0.
"git checkout -b 'new3.0' 'v3.0'"


6.)
Here, I applied the patch I got from step 4.
"patch -p1 < quote_patch.txt"
(Output)
can't find file to patch at input line 35
Perhaps you used the wrong -p or --strip option?
The text leading up to this was:
--------------------------
|commit 62ca21c8c1a5aa3488589dcb191a4ef04ae9ed4f
|Author: Paul Eggert <eggert@cs.ucla.edu>
|Date:   Wed Jan 25 23:46:16 2012 -0800
|
|    maint: quote 'like this' or "like this", not `like this'
|
|    This is in response to a recent change in the GNU coding standards,
|    which now suggest quoting 'like this' or "like this", instead of
|    `like this' or ``like this''.
|    * HACKING, NEWS, README, README-hacking, TODO, doc/diagmeet.note:
|    * doc/diffutils.texi, ms/config.bat, ms/config.site:
|    * src/analyze.c, src/cmp.c, src/context.c, src/diff.c:
|    * src/diff.h, src/diff3.c, src/dir.c, src/ifdef.c, src/io.c:
|    * src/sdiff.c, src/side.c, src/system.h, src/util.c:
|    * tests/help-version:
|    Quote 'like this' or "like this" in commentary.
|    * cfg.mk (old_NEWS_hash): Adjust to reflect new NEWS quoting.
|    * man/help2man: Update to 1.40.4 version, with quoting fixed as above.
|    * po/en.po: Remove translation involving `, as it's no longer needed.
|    * src/cmp.c (try_help, specify_ignore_initial, usage, main):
|    * src/diff.c (main, try_help, option_help_msgid, specify_value)
|    (compare_files):
|    * src/diff3.c (main, try_help, option_help_msgid, usage)
|    (read_diff):
|    * src/dir.c (compare_names):
|    * src/sdiff.c (try_help, usage, check_child_status, main):
|    * src/util.c (finish_output):
|    * tests/help-version:
|    Quote 'like this' in output.
|
|diff --git a/HACKING b/HACKING
|index 3a99833..522e0b5 100644
|--- a/HACKING
|+++ b/HACKING
--------------------------
File to patch:
Skip this patch? [y] y
Skipping patch.
1 out of 1 hunk ignored
patching file NEWS
Hunk #1 succeeded at 30 (offset -28 lines).
Hunk #2 succeeded at 66 (offset -28 lines).
Hunk #3 succeeded at 106 (offset -28 lines).
Hunk #4 succeeded at 140 (offset -28 lines).
Hunk #5 succeeded at 184 (offset -28 lines).
Hunk #6 succeeded at 197 (offset -28 lines).
Hunk #7 succeeded at 209 (offset -28 lines).
Hunk #8 succeeded at 221 (offset -28 lines).
patching file README
Hunk #1 FAILED at 9.
Hunk #3 FAILED at 60.
2 out of 3 hunks FAILED -- saving rejects to file README.rej
patching file README-hacking
Hunk #1 FAILED at 19.
1 out of 1 hunk FAILED -- saving rejects to file README-hacking.rej
patching file TODO
patching file cfg.mk
Hunk #1 FAILED at 29.
1 out of 1 hunk FAILED -- saving rejects to file cfg.mk.rej
patching file doc/diagmeet.note
can't find file to patch at input line 222
Perhaps you used the wrong -p or --strip option?
The text leading up to this was:
--------------------------
|diff --git a/doc/diffutils.texi b/doc/diffutils.texi
|index 58b140c..00403df 100644
|--- a/doc/diffutils.texi
|+++ b/doc/diffutils.texi
--------------------------
File to patch:
Skip this patch? [y] y
Skipping patch.
1 out of 1 hunk ignored
can't find file to patch at input line 235
Perhaps you used the wrong -p or --strip option?
The text leading up to this was:
--------------------------
|diff --git a/man/help2man b/man/help2man
|index f9983f7..8bc961c 100755
|--- a/man/help2man
|+++ b/man/help2man
--------------------------
File to patch:
Skip this patch? [y] y
Skipping patch.
9 out of 9 hunks ignored
patching file ms/config.bat
patching file ms/config.site
Hunk #1 succeeded at 73 with fuzz 1.
patching file po/en.po
patching file src/analyze.c
patching file src/cmp.c
Hunk #1 succeeded at 36 with fuzz 1.
Hunk #4 succeeded at 185 (offset -6 lines).
Hunk #5 succeeded at 231 (offset -6 lines).
Hunk #6 succeeded at 257 (offset -6 lines).
Hunk #7 succeeded at 269 (offset -6 lines).
Hunk #8 succeeded at 364 (offset -6 lines).
Hunk #9 succeeded at 377 (offset -6 lines).
patching file src/context.c
Hunk #1 succeeded at 159 (offset 1 line).
Hunk #2 succeeded at 289 (offset 1 line).
Hunk #3 succeeded at 393 with fuzz 2 (offset 1 line).
Hunk #4 succeeded at 431 (offset 1 line).
Hunk #5 succeeded at 459 (offset 1 line).
patching file src/diff.c
Hunk #1 succeeded at 40 with fuzz 2 (offset -2 lines).
Hunk #2 succeeded at 57 (offset -2 lines).
Hunk #3 succeeded at 92 (offset -2 lines).
Hunk #4 succeeded at 330 (offset -10 lines).
Hunk #5 succeeded at 505 (offset -10 lines).
Hunk #6 succeeded at 534 (offset -10 lines).
Hunk #7 succeeded at 585 (offset -14 lines).
Hunk #8 succeeded at 744 (offset -14 lines).
Hunk #9 succeeded at 826 (offset -14 lines).
Hunk #10 FAILED at 876.
Hunk #11 FAILED at 906.
Hunk #12 FAILED at 942.
Hunk #13 succeeded at 960 with fuzz 2 (offset -29 lines).
Hunk #14 succeeded at 1159 with fuzz 2 (offset -32 lines).
3 out of 14 hunks FAILED -- saving rejects to file src/diff.c.rej
patching file src/diff.h
Hunk #2 succeeded at 126 with fuzz 2 (offset -13 lines).
Hunk #3 succeeded at 202 (offset -13 lines).
patching file src/diff3.c
Hunk #1 succeeded at 35 (offset 1 line).
Hunk #2 succeeded at 159 (offset 1 line).
Hunk #3 succeeded at 316 (offset 1 line).
Hunk #4 succeeded at 351 (offset 1 line).
Hunk #5 succeeded at 412 (offset 1 line).
Hunk #6 FAILED at 433.
Hunk #7 succeeded at 460 with fuzz 2 (offset -18 lines).
Hunk #8 succeeded at 1275 (offset -18 lines).
Hunk #9 succeeded at 1475 (offset -18 lines).
1 out of 9 hunks FAILED -- saving rejects to file src/diff3.c.rej
patching file src/dir.c
Hunk #1 succeeded at 84 (offset -1 lines).
Hunk #2 succeeded at 125 (offset -1 lines).
Hunk #3 succeeded at 154 (offset -1 lines).
Hunk #4 succeeded at 234 (offset -1 lines).
patching file src/ifdef.c
patching file src/io.c
patching file src/sdiff.c
Hunk #2 succeeded at 92 (offset 1 line).
Hunk #3 succeeded at 175 (offset 23 lines).
Hunk #4 succeeded at 230 (offset 17 lines).
Hunk #5 succeeded at 286 (offset 17 lines).
Hunk #6 succeeded at 572 (offset 13 lines).
Hunk #7 succeeded at 747 (offset 41 lines).
patching file src/side.c
patching file src/system.h
Hunk #2 succeeded at 105 (offset 6 lines).
patching file src/util.c
Hunk #4 succeeded at 190 with fuzz 2.
Hunk #8 succeeded at 650 (offset -27 lines).
patching file tests/help-version
Hunk #1 succeeded at 75 (offset 1 line).
Hunk #2 succeeded at 85 (offset 1 line).
Hunk #3 succeeded at 96 (offset 1 line).
Hunk #4 succeeded at 108 (offset 1 line).
Hunk #5 succeeded at 140 (offset 1 line).
Hunk #6 succeeded at 188 (offset 1 line).


7.)
Here is an overview of what has happened after appling the patch.
"git status"
(Output)
# On branch new3.0
# Changes not staged for commit:
#   (use "git add <file>..." to update what will be committed)
#   (use "git checkout -- <file>..." to discard changes in working directory)
#
#       modified:   NEWS
#       modified:   README
#       modified:   TODO
#       modified:   doc/diagmeet.note
#       modified:   ms/config.bat
#       modified:   ms/config.site
#       modified:   po/en.po
#       modified:   src/analyze.c
#       modified:   src/cmp.c
#       modified:   src/context.c
#       modified:   src/diff.c
#       modified:   src/diff.h
#       modified:   src/diff3.c
#       modified:   src/dir.c
#       modified:   src/ifdef.c
#       modified:   src/io.c
#       modified:   src/sdiff.c
#       modified:   src/side.c
#       modified:   src/system.h
#       modified:   src/util.c
#       modified:   tests/help-version
#
# Untracked files:
#   (use "git add <file>..." to include in what will be committed)
#
#       NEWS.orig
#       README-hacking.orig
#       README-hacking.rej
#       README.orig
#       README.rej
#       cfg.mk.orig
#       cfg.mk.rej
#       git-log.txt
#       git-tags.txt
#       ms/config.site.orig
#       quote_patch.txt
#       src/cmp.c.orig
#       src/context.c.orig
#       src/diff.c.orig
#       src/diff.c.rej
#       src/diff.h.orig
#       src/diff3.c.orig
#       src/diff3.c.rej
#       src/dir.c.orig
#       src/sdiff.c.orig
#       src/system.h.orig
#       src/util.c.orig
#       tests/help-version.orig
no changes added to commit (use "git add" and/or "git commit -a")

As we can see, a total of 21 files are modified, and the original copies and
the patch rejects are stored in some new files.


8.) / 9.)
For the files:
NEWS
README
TODO
doc/diagmeet.note
ms/config.bat
ms/config.site
po/en.po
src/diff.h
src/system.h
test/help-version
tests/help-version

Here, I simply ran vc-revert (C-x v u) and undid the edits done to them.


For the files:
src/analyze.c
src/cmp.c
src/context.c
src/diff.c
src/diff3.c
src/dir.c
src/ifdef.c
src/io.c
src/sdiff.c
src/side.c
src/util.c

Here, I ran vc-diff (C-x v =) and opened up the buffer for the diff file used
to patch them. Then I used (C-c C-c) to find the locations of the patches and
(C-u C-c C-a) to revert the hunk of the patch applied (only if it didn't
involve changing a text string in the actual code).

Then, I checked the status of which files remained modified in any way.

"git status"
(Output:)
# On branch new3.0
# Changes not staged for commit:
#   (use "git add <file>..." to update what will be committed)
#   (use "git checkout -- <file>..." to discard changes in working directory)
#
#       modified:   src/cmp.c
#       modified:   src/diff.c
#       modified:   src/diff3.c
#       modified:   src/dir.c
#       modified:   src/sdiff.c
#       modified:   src/util.c
#
# Untracked files:
#   (use "git add <file>..." to include in what will be committed)
#
#       NEWS.orig
#       README-hacking.orig
#       README-hacking.rej
#       README.orig
#       README.rej
#       cfg.mk.orig
#       cfg.mk.rej
#       git-log.txt
#       git-tags.txt
#       ms/config.site.orig
#       quote_patch.txt
#       src/cmp.c.orig
#       src/context.c.orig
#       src/diff.c.orig
#       src/diff.c.rej
#       src/diff.h.orig
#       src/diff3.c.orig
#       src/diff3.c.rej
#       src/dir.c.orig
#       src/sdiff.c.orig
#       src/system.h.orig
#       src/util.c.orig
#       tests/help-version.orig
no changes added to commit (use "git add" and/or "git commit -a")


10.)
Here, I basically looked through which files are not empty (to find the
rejected patches). We end up with (not empty):

src/diff.c.rej
src/diff3.c.rej

So for these two files, changed all ` in comments into '.


11.)
First, I checked the status of the current branch.
"git status"
(Output:)
# On branch new3.0
# Changes not staged for commit:
#   (use "git add <file>..." to update what will be committed)
#   (use "git checkout -- <file>..." to discard changes in working directory)
#
#       modified:   src/cmp.c
#       modified:   src/diff.c
#       modified:   src/diff3.c
#       modified:   src/dir.c
#       modified:   src/sdiff.c
#       modified:   src/util.c
#
# Untracked files:
#   (use "git add <file>..." to include in what will be committed)
#
#       NEWS.orig
#       README-hacking.orig
#       README-hacking.rej
#       README.orig
#       README.rej
#       cfg.mk.orig
#       cfg.mk.rej
#       git-log.txt
#       git-tags.txt
#       ms/config.site.orig
#       quote_patch.txt
#       src/cmp.c.orig
#       src/context.c.orig
#       src/diff.c.orig
#       src/diff.c.rej
#       src/diff.h.orig
#       src/diff3.c.orig
#       src/diff3.c.rej
#       src/dir.c.orig
#       src/sdiff.c.orig
#       src/system.h.orig
#       src/util.c.orig
#       tests/help-version.orig
no changes added to commit (use "git add" and/or "git commit -a")

Here, I clean all of the untracked files.
"git clean -f"
(Output:)
Removing NEWS.orig
Removing README-hacking.orig
Removing README-hacking.rej
Removing README.orig
Removing README.rej
Removing cfg.mk.orig
Removing cfg.mk.rej
Removing git-log.txt
Removing git-tags.txt
Removing ms/config.site.orig
Removing quote_patch.txt
Removing src/cmp.c.orig
Removing src/context.c.orig
Removing src/diff.c.orig
Removing src/diff.c.rej
Removing src/diff.h.orig
Removing src/diff3.c.orig
Removing src/diff3.c.rej
Removing src/dir.c.orig
Removing src/sdiff.c.orig
Removing src/system.h.orig
Removing src/util.c.orig
Removing tests/help-version.orig

SHowing the status afterwards.
"git status"
(Output:)
# On branch new3.0
# Changes not staged for commit:
#   (use "git add <file>..." to update what will be committed)
#   (use "git checkout -- <file>..." to discard changes in working directory)
#
#       modified:   src/cmp.c
#       modified:   src/diff.c
#       modified:   src/diff3.c
#       modified:   src/dir.c
#       modified:   src/sdiff.c
#       modified:   src/util.c
#
no changes added to commit (use "git add" and/or "git commit -a")


12.)
Now, I put the summary of the new patch into a text file.
"git diff > quote-3.0-patch.txt"


13.)
(running on lnxsrv05.seas.ucla.edu)
(First, I checked the version.)
"ldd --version"
(Output:)
ldd (GNU libc) 2.12
Copyright (C) 2010 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
Written by Roland McGrath and Ulrich Drepper.

Then, I ran the following to compile and set up diff.
"export PATH=/usr/local/cs/bin:$PATH"
"./bootstrap"
"./configure"
"make"
"make check"

Checking diff.
"src/diff . -"
"src/diff --help"
There were no cases of the grave character `, so the patch was successful.


14.)
First I made a new working directory for the original repository and copied
the src directory. The only file to be removed was the Makefile.
Then, I copied the src directory from the patched diffutils, and deleted all
non-.c files.
Then, I ran:
"diffutils/src/diff -pru diffutils-3.0 diffutils-3.0-patch > quote-3.0-test.txt"


15.)
"diff quote-3.0-test.txt quote-3.0-patch.txt > difference"
Long, but only difference is mainly the change from `' to ''.
The patch is successful.