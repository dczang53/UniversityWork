c u r l SP w e b . c s . u c l a . e d u / c l a s s e s / f a l l 1 7 / c s 3
5 L / a s s i g n / a s s i g n 1 . h t m l SP > SP a s s i g n 1 . h t m l
c p SP a s s i g n 1 . h t m l SP e x e r 1 . h t m l
c p SP a s s i g n 1 . h t m l SP e x e r 2 . h t m l
c p SP a s s i g n 1 . h t m l SP e x e r 3 . h t m l

(*NOTE: "Backspace" refers to the backspace key :^) )



Exercise 1.1: Moving around in Emacs

1.) C-x C-f e x e r 1 . h t m l
2.) C-s P U C-g 
3.) C-s L a C-g 
4.) C-s S e l f C-g 
5.) C-s a r r o w C-g 
6.) C-e
7.) C-a
8.) M-> M-<
9.) (No, I did not use the arrow keys.)
10.) C-x C-c



Exercise 1.2: Deleting text in Emacs

1.) C-x C-f e x e r 2 . h t m l
2.) M-g g 1 8 ENTER C-k
3.) C-s D E C-a C-k
4.) C-s < ! C-a C-k C-k C-k C-k C-k
5.) C-s < ! ENTER C-d C-d C-d C-d C-d Backspace Backspace C-s < ! C-a C-k
    C-x C-s C-x C-c



Exercise 1.3: Inserting text in Emacs

1.) C-x C-f e x e r 3 . h t m l
2.) C-s A M-f M-f Backspace 3 7 C-s A M-f M-f Backspace 3 7
3.) M-< C-s U T ENTER C-d RIGHT C-d A S C I I
4.) C-s < / o C-a ENTER
5.) C-x C-s C-x C-c



Exercise 1.4: Other editing tasks in Emacs

1.) cat  SP e x e r 2 . h t m l SP e x e r 2 . d i f f SP > e x e r 4 . h t m l
2.) C-x C-f exer4.html
3.) M-> C-r < ! c-SP C-e M-w M-g g 3 5 2 Enter Down C-y Enter
4.) M-> C-r < ! C-r C-SP Right Right Right Right Right Right Right
    M-w M-g g 3 3 7 Enter Down C-e M-b M-b M-f C-y
    M-> C-r < ! C-r C-r C-SP Down Down C-e M-w M-g g 3 0 0 Enter
    Down Down Down C-y C-a C-d Up C-d
    M-> C-r < ! C-r C-r C-r C-SP C-e M-w M-g g 9 0 Enter Down Down Down C-y
    M-> C-r < ! C-r C-r C-r C-r C-SP Down Down Down Down Down C-e M-w
    M-g g 1 5 Enter Down Down Down C-y
5.) M-> C-r - - - C-r C-SP M-> C-w
6.) C-/
7.) Enter - - > C-r - - - C-r Enter Up < ! - -
8.) M-< M-% < o l > Enter < O L > Enter y y y y y y y
    ("Replaced 7 occurrences")
9.) d i f f SP -u SP e x e r 1 . h t m l SP e x e r 4 . h t m l SP > e x e r 4
. d i f f



Exercise 1.5: Doing commands in Emacs

1.) M-x m k d i r Enter j u n k Enter
2.) c d Enter junk Enter C-x C-f h e l l o . c Enter
    (Copying code in exer1.html)
    C-x C-f e x e r 1 . h t m l C-s m a i C-a Up C-SP Down Down Down Down Down
    Down Down Down Down Down Right M-w 
    (Pasting code in hello.c)
    C-y
3.) M-x c o m p i l e Backspace Backspace Backspace Backspace Backspace
    Backspace Backspace Backspace g c c SP h e l l o . c Enter
4.) C-x b h e l l o - o u t
    C-u M-! ./a.out
5.) C-SP M-> M-W
    (Change buffer to log)
    C-x Right
    (Yank)
    M-> C-y

Output:
#include &lt;stdio.h&gt;
int
main (void)
{
  char n = '\n';
  char b = '\\';
  char q = ';';
  char const *p = ;#include &lt;stdio.h&gt;%cint%cmain (void)%c{%c  char n = '%cn';%c  char b = '%c%c';%c  char q = '%c';%c  char const *p = %c%s%c;%c  printf (p, n, n, n, n, b, n, b, b, n, q, n, q, p, q, n, n, n, n);%c  return 0;%c}%c;;
  printf (p, n, n, n, n, b, n, b, b, n, q, n, q, p, q, n, n, n, n);
  return 0;
}

Exercise 1.6: Running Elisp code
1.) C-x Right
2.) ( r a n d o m ) C-j
3.) ( s e t q SP x SP ( r a n d o m ) ) C-j
    ( s e t q SP y SP ( r a n d o m ) ) C-j
4.) ( * SP x SP y )
    The answer is mathematically incorrect. x is set to -737004071327947834,
    while y is set to -1000278277145540493, and the result of (* x y) is
    470588570765279730. This is likely due to overflow, since the numbers are
    both so large.
5.) M - : SP ( * SP x SP y )
    The output is the same.
6.) The two numbers are not truly random, because the numbers generated by
random depend on in initial seed. According to the GNU website, starting from
any specific seed, the same sequence of numbers will be generated every time.
The seed is initialized whenever Emacs is started up, and one cannot acertain
that the seed is truly randomly generated; it will only guarantee even
distribution.
(http://www.gnu.org/software/emacs/manual/html_node/elisp/Random-Numbers.html)

7.) Assuming that the numbers are truly random every time, the likelyhood that
the integer multiplication between random numbers is incorrect is almost %100.
Calculation:
We assume that ints are 64 bits (Lisp requires it to be a minimum of 28, but
invoking random a few times led to numbers that are only possible for 64 bit.
For 2 64-bit numbers to overflow through multiplication, the bit
representation of both numbers must sum up to be greater than 64. So, we
calculate the change that two randomly generated numbers from -(2^63) to
(2^63)-1 to have the absolute value of their product to be greater than
(2^63). The number of possible non-overflow solutions is 2*63(2^63)+(2^64)
(since 2 bit numbers can complement 62 bit numbers and less, 3 bit complement
 61 bit and less, etc...) (and *2 for negative numbers, and +2^64 for 0), and
the total number of possible multiplications is 2^128. So, the probability of
an overflow is 1-((126(2^63)+(2^64))/(2^128)).
(Note that we are approximating, since we include some cases in which
the bitwise-multiplication would have "carry-over" digits. However, the
probability is so small that it likely insignificant.)

