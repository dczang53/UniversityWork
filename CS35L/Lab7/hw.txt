1.) If one of the other teams were to observe all of the bytes going across
the network, the network would still be secure because all of the data being
exchanged are encrypted with the session key.

However, if, in addition to seeing all of the bytes exchanged, another party
were to observe all keystrokes, then the network wouldn't be secure as it
would be able see what data is being sent as well as obtain the private key
by knowing what passphrase is entered (as the private key is encrypted using
the passphrase). The second possibility can be avoided if one were to use
passphrase-less ssh.

If another party were to have access to the USB, then the party would
potentially have access to the private key stored in ssh-agent (and the
passphrase if it were stored in it too). If the passphrase were not stored
in the ssh-agent, then the party would still not have have access to the
account as both the passphrase and the private keys are needed.

2.) The command "gpg --verify" cannot verify the original creator of the file.
The command only checks if the digital signature matches with the actual
data, meaning that it will only check that the file is not modified after
being sent by the sender. In other words, "gpg --verify" will only check that
the digital signature created by the sender's private key matches with the
sender's public key, and without a way to tell if the public key belongs to a
particular individual, it is impossible to tell who the original creater is.

The primary solution to the this problem to be to implement a way of logging
the original creator and distinguishing the creator's signature from another
individual's. To do that, one must use third party certificate authority to
verify who created and track the history of who modified the file.