Time Tests for Varying Numbers of Lines:

--------------------------------------------------

(1) Line:
time ./sfrob < tone.txt
real    0m0.003s
user    0m0.000s
sys     0m0.001s

time ./sfrobu < tone.txt
real    0m0.002s
user    0m0.002s
sys     0m0.000s

time ./sfrobu -f < tone.txt
real    0m0.003s
user    0m0.000s
sys     0m0.002s

time ./sfrobs < tone.txt
real    0m0.010s
user    0m0.004s
sys     0m0.004s

time ./sfrobs -f < tone.txt
real    0m0.009s
user    0m0.002s
sys     0m0.005s

--------------------------------------------------

(10) Lines:
time ./sfrob < tten.txt
real    0m0.002s
user    0m0.001s
sys     0m0.000s

time ./sfrobu < tten.txt
real    0m0.004s
user    0m0.001s
sys     0m0.001s

time ./sfrobu -f < tten.txt
real    0m0.003s
user    0m0.001s
sys     0m0.001s

time ./sfrobs < tten.txt
real    0m0.016s
user    0m0.004s
sys     0m0.004s

time ./sfrobs -f < tten.txt
real    0m0.009s
user    0m0.001s
sys     0m0.007s

--------------------------------------------------

(100) Lines:
time ./sfrob < thundred.txt
real    0m0.003s
user    0m0.000s
sys     0m0.001s

time ./sfrobu < thundred.txt
real    0m0.004s
user    0m0.001s
sys     0m0.001s

time ./sfrobu -f < thundred.txt
real    0m0.004s
user    0m0.003s
sys     0m0.000s

time ./sfrobs < thundred.txt
real    0m0.009s
user    0m0.002s
sys     0m0.006s

time ./sfrobs -f < thundred.txt
real    0m0.009s
user    0m0.004s
sys     0m0.005s

--------------------------------------------------

(1000) Lines:
time ./sfrob < tthousand.txt
real    0m0.009s
user    0m0.003s
sys     0m0.001s

time ./sfrobu < tthousand.txt
real    0m0.017s
user    0m0.002s
sys     0m0.010s

time ./sfrobu -f < tthousand.txt
real    0m0.021s
user    0m0.006s
sys     0m0.009s

time ./sfrobs < tthousand.txt
real    0m0.014s
user    0m0.003s
sys     0m0.005s

time ./sfrobs -f < tthousand.txt
real    0m0.014s
user    0m0.004s
sys     0m0.005s

--------------------------------------------------

(10000) Lines:
time ./sfrob < ttenthousand.txt
real    0m0.151s
user    0m0.031s
sys     0m0.003s

time ./sfrobu < ttenthousand.txt
real    0m0.206s
user    0m0.024s
sys     0m0.083s

time ./sfrobu -f < ttenthousand.txt
real    0m0.241s
user    0m0.026s
sys     0m0.086s

time ./sfrobs < ttenthousand.txt
real    0m0.141s
user    0m0.012s
sys     0m0.012s

time ./sfrobs -f < ttenthousand.txt
real    0m0.110s
user    0m0.017s
sys     0m0.008s

--------------------------------------------------

(100000) Lines:
time ./sfrob < ttenthousand.txt
real    0m1.226s
user    0m0.258s
sys     0m0.031s

time ./sfrobu < ttenthousand.txt
real    0m2.145s
user    0m0.262s
sys     0m0.782s

time ./sfrobu -f < ttenthousand.txt
real    0m2.089s
user    0m0.250s
sys     0m0.767s

time ./sfrobs < ttenthousand.txt
real    0m0.968s
user    0m0.076s
sys     0m0.054s

time ./sfrobs -f < ttenthousand.txt
real    0m1.263s
user    0m0.120s
sys     0m0.059s

--------------------------------------------------

(Note: The files used are just iterations of the line
"THISisFORtestingPURPOSESonly ", generated by a C function I wrote.)

Here, looking at the system times, we can generally see that the unbuffered
sfrobu is 10 times soler than sfrob starting at 1000 lines, and the factor
increases as the number of lines increases. sfrobs also becomes slower than
sfrob, but not as much as sfrobu.
All of the above is to be expected, since the system time corresponds to the
amount the CPU time the process spends in the kernel, which also corresponds
to the total number of system calls made by each program. The unbuffered
sfrobu definitely has more system calls than sfrob, and sfrobs likely has more
system calls as it is higher level compared to sfrob, which is written in C.


Number of Lines     |     Comparisons
1                   |     0
10                  |     15
100                 |     316
1000                |     4932
10000               |     64608
100000              |     815024

From this data, we can try to estimate the number of comparisons for a given
number of lines. Since qsort is O(nlogn), we can estimate that the function
will be f(n) = (0.7n)ln(n), which is very close to the data.
